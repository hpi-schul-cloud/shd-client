/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EntityNotFoundError } from '../models';
// @ts-ignore
import { ForbiddenOperationError } from '../models';
// @ts-ignore
import { UserListResponse } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
// @ts-ignore
import { ValidationError } from '../models';
/**
 * AdminStudentsApi - axios parameter creator
 * @export
 */
export const AdminStudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns an student with given id.
         * @param {string} id The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApiStudentsControllerFindStudentById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminApiStudentsControllerFindStudentById', 'id', id)
            const localVarPath = `/users/admin/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all students which satisfies the given criteria.
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {number} [$limit] Page limit, defaults to 25.
         * @param {number} [$skip] Number of elements (not pages) to be skipped
         * @param {Array<string>} [classes] 
         * @param {string} [searchQuery] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApiStudentsControllerSearchStudents: async (skip?: number, limit?: number, $limit?: number, $skip?: number, classes?: Array<string>, searchQuery?: string, users?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/admin/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if (classes) {
                localVarQueryParameter['classes'] = classes;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (users) {
                localVarQueryParameter['users'] = users;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminStudentsApi - functional programming interface
 * @export
 */
export const AdminStudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminStudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns an student with given id.
         * @param {string} id The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminApiStudentsControllerFindStudentById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminApiStudentsControllerFindStudentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all students which satisfies the given criteria.
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {number} [$limit] Page limit, defaults to 25.
         * @param {number} [$skip] Number of elements (not pages) to be skipped
         * @param {Array<string>} [classes] 
         * @param {string} [searchQuery] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminApiStudentsControllerSearchStudents(skip?: number, limit?: number, $limit?: number, $skip?: number, classes?: Array<string>, searchQuery?: string, users?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminApiStudentsControllerSearchStudents(skip, limit, $limit, $skip, classes, searchQuery, users, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminStudentsApi - factory interface
 * @export
 */
export const AdminStudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminStudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns an student with given id.
         * @param {string} id The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApiStudentsControllerFindStudentById(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.adminApiStudentsControllerFindStudentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all students which satisfies the given criteria.
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {number} [$limit] Page limit, defaults to 25.
         * @param {number} [$skip] Number of elements (not pages) to be skipped
         * @param {Array<string>} [classes] 
         * @param {string} [searchQuery] 
         * @param {Array<string>} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApiStudentsControllerSearchStudents(skip?: number, limit?: number, $limit?: number, $skip?: number, classes?: Array<string>, searchQuery?: string, users?: Array<string>, options?: any): AxiosPromise<UserListResponse> {
            return localVarFp.adminApiStudentsControllerSearchStudents(skip, limit, $limit, $skip, classes, searchQuery, users, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminStudentsApi - interface
 * @export
 * @interface AdminStudentsApi
 */
export interface AdminStudentsApiInterface {
    /**
     * 
     * @summary Returns an student with given id.
     * @param {string} id The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStudentsApiInterface
     */
    adminApiStudentsControllerFindStudentById(id: string, options?: any): AxiosPromise<UserResponse>;

    /**
     * 
     * @summary Returns all students which satisfies the given criteria.
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {number} [$limit] Page limit, defaults to 25.
     * @param {number} [$skip] Number of elements (not pages) to be skipped
     * @param {Array<string>} [classes] 
     * @param {string} [searchQuery] 
     * @param {Array<string>} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStudentsApiInterface
     */
    adminApiStudentsControllerSearchStudents(skip?: number, limit?: number, $limit?: number, $skip?: number, classes?: Array<string>, searchQuery?: string, users?: Array<string>, options?: any): AxiosPromise<UserListResponse>;

}

/**
 * AdminStudentsApi - object-oriented interface
 * @export
 * @class AdminStudentsApi
 * @extends {BaseAPI}
 */
export class AdminStudentsApi extends BaseAPI implements AdminStudentsApiInterface {
    /**
     * 
     * @summary Returns an student with given id.
     * @param {string} id The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStudentsApi
     */
    public adminApiStudentsControllerFindStudentById(id: string, options?: any) {
        return AdminStudentsApiFp(this.configuration).adminApiStudentsControllerFindStudentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all students which satisfies the given criteria.
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {number} [$limit] Page limit, defaults to 25.
     * @param {number} [$skip] Number of elements (not pages) to be skipped
     * @param {Array<string>} [classes] 
     * @param {string} [searchQuery] 
     * @param {Array<string>} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStudentsApi
     */
    public adminApiStudentsControllerSearchStudents(skip?: number, limit?: number, $limit?: number, $skip?: number, classes?: Array<string>, searchQuery?: string, users?: Array<string>, options?: any) {
        return AdminStudentsApiFp(this.configuration).adminApiStudentsControllerSearchStudents(skip, limit, $limit, $skip, classes, searchQuery, users, options).then((request) => request(this.axios, this.basePath));
    }
}
