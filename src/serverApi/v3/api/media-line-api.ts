/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CollapsableBodyParams } from '../models';
// @ts-ignore
import { ColorBodyParams } from '../models';
// @ts-ignore
import { MoveColumnBodyParams } from '../models';
// @ts-ignore
import { RenameBodyParams } from '../models';
/**
 * MediaLineApi - axios parameter creator
 * @export
 */
export const MediaLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Collapse available line in media board.
         * @param {string} lineId The id of the line
         * @param {CollapsableBodyParams} collapsableBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerCollapseMediaLine: async (lineId: string, collapsableBodyParams: CollapsableBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('mediaLineControllerCollapseMediaLine', 'lineId', lineId)
            // verify required parameter 'collapsableBodyParams' is not null or undefined
            assertParamExists('mediaLineControllerCollapseMediaLine', 'collapsableBodyParams', collapsableBodyParams)
            const localVarPath = `/media-lines/{lineId}/collapse`
                .replace(`{${"lineId"}}`, encodeURIComponent(String(lineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collapsableBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single line.
         * @param {string} lineId The id of the line
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerDeleteLine: async (lineId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('mediaLineControllerDeleteLine', 'lineId', lineId)
            const localVarPath = `/media-lines/{lineId}`
                .replace(`{${"lineId"}}`, encodeURIComponent(String(lineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move a single line.
         * @param {string} lineId The id of the line
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerMoveLine: async (lineId: string, moveColumnBodyParams: MoveColumnBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('mediaLineControllerMoveLine', 'lineId', lineId)
            // verify required parameter 'moveColumnBodyParams' is not null or undefined
            assertParamExists('mediaLineControllerMoveLine', 'moveColumnBodyParams', moveColumnBodyParams)
            const localVarPath = `/media-lines/{lineId}/position`
                .replace(`{${"lineId"}}`, encodeURIComponent(String(lineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveColumnBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the color of a single line.
         * @param {string} lineId The id of the line
         * @param {ColorBodyParams} colorBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerUpdateBackgroundColor: async (lineId: string, colorBodyParams: ColorBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('mediaLineControllerUpdateBackgroundColor', 'lineId', lineId)
            // verify required parameter 'colorBodyParams' is not null or undefined
            assertParamExists('mediaLineControllerUpdateBackgroundColor', 'colorBodyParams', colorBodyParams)
            const localVarPath = `/media-lines/{lineId}/color`
                .replace(`{${"lineId"}}`, encodeURIComponent(String(lineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(colorBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the title of a single line.
         * @param {string} lineId The id of the line
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerUpdateLineTitle: async (lineId: string, renameBodyParams: RenameBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('mediaLineControllerUpdateLineTitle', 'lineId', lineId)
            // verify required parameter 'renameBodyParams' is not null or undefined
            assertParamExists('mediaLineControllerUpdateLineTitle', 'renameBodyParams', renameBodyParams)
            const localVarPath = `/media-lines/{lineId}/title`
                .replace(`{${"lineId"}}`, encodeURIComponent(String(lineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaLineApi - functional programming interface
 * @export
 */
export const MediaLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Collapse available line in media board.
         * @param {string} lineId The id of the line
         * @param {CollapsableBodyParams} collapsableBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaLineControllerCollapseMediaLine(lineId: string, collapsableBodyParams: CollapsableBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaLineControllerCollapseMediaLine(lineId, collapsableBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single line.
         * @param {string} lineId The id of the line
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaLineControllerDeleteLine(lineId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaLineControllerDeleteLine(lineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move a single line.
         * @param {string} lineId The id of the line
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaLineControllerMoveLine(lineId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaLineControllerMoveLine(lineId, moveColumnBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the color of a single line.
         * @param {string} lineId The id of the line
         * @param {ColorBodyParams} colorBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaLineControllerUpdateBackgroundColor(lineId: string, colorBodyParams: ColorBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaLineControllerUpdateBackgroundColor(lineId, colorBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the title of a single line.
         * @param {string} lineId The id of the line
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaLineControllerUpdateLineTitle(lineId: string, renameBodyParams: RenameBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaLineControllerUpdateLineTitle(lineId, renameBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaLineApi - factory interface
 * @export
 */
export const MediaLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Collapse available line in media board.
         * @param {string} lineId The id of the line
         * @param {CollapsableBodyParams} collapsableBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerCollapseMediaLine(lineId: string, collapsableBodyParams: CollapsableBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.mediaLineControllerCollapseMediaLine(lineId, collapsableBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single line.
         * @param {string} lineId The id of the line
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerDeleteLine(lineId: string, options?: any): AxiosPromise<void> {
            return localVarFp.mediaLineControllerDeleteLine(lineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move a single line.
         * @param {string} lineId The id of the line
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerMoveLine(lineId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.mediaLineControllerMoveLine(lineId, moveColumnBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the color of a single line.
         * @param {string} lineId The id of the line
         * @param {ColorBodyParams} colorBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerUpdateBackgroundColor(lineId: string, colorBodyParams: ColorBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.mediaLineControllerUpdateBackgroundColor(lineId, colorBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the title of a single line.
         * @param {string} lineId The id of the line
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLineControllerUpdateLineTitle(lineId: string, renameBodyParams: RenameBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.mediaLineControllerUpdateLineTitle(lineId, renameBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaLineApi - interface
 * @export
 * @interface MediaLineApi
 */
export interface MediaLineApiInterface {
    /**
     * 
     * @summary Collapse available line in media board.
     * @param {string} lineId The id of the line
     * @param {CollapsableBodyParams} collapsableBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApiInterface
     */
    mediaLineControllerCollapseMediaLine(lineId: string, collapsableBodyParams: CollapsableBodyParams, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Delete a single line.
     * @param {string} lineId The id of the line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApiInterface
     */
    mediaLineControllerDeleteLine(lineId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Move a single line.
     * @param {string} lineId The id of the line
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApiInterface
     */
    mediaLineControllerMoveLine(lineId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Update the color of a single line.
     * @param {string} lineId The id of the line
     * @param {ColorBodyParams} colorBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApiInterface
     */
    mediaLineControllerUpdateBackgroundColor(lineId: string, colorBodyParams: ColorBodyParams, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Update the title of a single line.
     * @param {string} lineId The id of the line
     * @param {RenameBodyParams} renameBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApiInterface
     */
    mediaLineControllerUpdateLineTitle(lineId: string, renameBodyParams: RenameBodyParams, options?: any): AxiosPromise<void>;

}

/**
 * MediaLineApi - object-oriented interface
 * @export
 * @class MediaLineApi
 * @extends {BaseAPI}
 */
export class MediaLineApi extends BaseAPI implements MediaLineApiInterface {
    /**
     * 
     * @summary Collapse available line in media board.
     * @param {string} lineId The id of the line
     * @param {CollapsableBodyParams} collapsableBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApi
     */
    public mediaLineControllerCollapseMediaLine(lineId: string, collapsableBodyParams: CollapsableBodyParams, options?: any) {
        return MediaLineApiFp(this.configuration).mediaLineControllerCollapseMediaLine(lineId, collapsableBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single line.
     * @param {string} lineId The id of the line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApi
     */
    public mediaLineControllerDeleteLine(lineId: string, options?: any) {
        return MediaLineApiFp(this.configuration).mediaLineControllerDeleteLine(lineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move a single line.
     * @param {string} lineId The id of the line
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApi
     */
    public mediaLineControllerMoveLine(lineId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any) {
        return MediaLineApiFp(this.configuration).mediaLineControllerMoveLine(lineId, moveColumnBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the color of a single line.
     * @param {string} lineId The id of the line
     * @param {ColorBodyParams} colorBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApi
     */
    public mediaLineControllerUpdateBackgroundColor(lineId: string, colorBodyParams: ColorBodyParams, options?: any) {
        return MediaLineApiFp(this.configuration).mediaLineControllerUpdateBackgroundColor(lineId, colorBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the title of a single line.
     * @param {string} lineId The id of the line
     * @param {RenameBodyParams} renameBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaLineApi
     */
    public mediaLineControllerUpdateLineTitle(lineId: string, renameBodyParams: RenameBodyParams, options?: any) {
        return MediaLineApiFp(this.configuration).mediaLineControllerUpdateLineTitle(lineId, renameBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}
