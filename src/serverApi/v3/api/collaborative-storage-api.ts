/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TeamPermissionsBody } from '../models';
/**
 * CollaborativeStorageApi - axios parameter creator
 * @export
 */
export const CollaborativeStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the CRUD Permissions(+Share) for a specific Role in a Team
         * @param {string} teamId 
         * @param {string} roleId 
         * @param {TeamPermissionsBody} teamPermissionsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeStorageControllerUpdateTeamPermissionsForRole: async (teamId: string, roleId: string, teamPermissionsBody: TeamPermissionsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('collaborativeStorageControllerUpdateTeamPermissionsForRole', 'teamId', teamId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('collaborativeStorageControllerUpdateTeamPermissionsForRole', 'roleId', roleId)
            // verify required parameter 'teamPermissionsBody' is not null or undefined
            assertParamExists('collaborativeStorageControllerUpdateTeamPermissionsForRole', 'teamPermissionsBody', teamPermissionsBody)
            const localVarPath = `/collaborative-storage/team/{teamId}/role/{roleId}/permissions`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamPermissionsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollaborativeStorageApi - functional programming interface
 * @export
 */
export const CollaborativeStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollaborativeStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the CRUD Permissions(+Share) for a specific Role in a Team
         * @param {string} teamId 
         * @param {string} roleId 
         * @param {TeamPermissionsBody} teamPermissionsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId: string, roleId: string, teamPermissionsBody: TeamPermissionsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId, roleId, teamPermissionsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollaborativeStorageApi - factory interface
 * @export
 */
export const CollaborativeStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollaborativeStorageApiFp(configuration)
    return {
        /**
         * Updates the CRUD Permissions(+Share) for a specific Role in a Team
         * @param {string} teamId 
         * @param {string} roleId 
         * @param {TeamPermissionsBody} teamPermissionsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId: string, roleId: string, teamPermissionsBody: TeamPermissionsBody, options?: any): AxiosPromise<void> {
            return localVarFp.collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId, roleId, teamPermissionsBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollaborativeStorageApi - interface
 * @export
 * @interface CollaborativeStorageApi
 */
export interface CollaborativeStorageApiInterface {
    /**
     * Updates the CRUD Permissions(+Share) for a specific Role in a Team
     * @param {string} teamId 
     * @param {string} roleId 
     * @param {TeamPermissionsBody} teamPermissionsBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeStorageApiInterface
     */
    collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId: string, roleId: string, teamPermissionsBody: TeamPermissionsBody, options?: any): AxiosPromise<void>;

}

/**
 * CollaborativeStorageApi - object-oriented interface
 * @export
 * @class CollaborativeStorageApi
 * @extends {BaseAPI}
 */
export class CollaborativeStorageApi extends BaseAPI implements CollaborativeStorageApiInterface {
    /**
     * Updates the CRUD Permissions(+Share) for a specific Role in a Team
     * @param {string} teamId 
     * @param {string} roleId 
     * @param {TeamPermissionsBody} teamPermissionsBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeStorageApi
     */
    public collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId: string, roleId: string, teamPermissionsBody: TeamPermissionsBody, options?: any) {
        return CollaborativeStorageApiFp(this.configuration).collaborativeStorageControllerUpdateTeamPermissionsForRole(teamId, roleId, teamPermissionsBody, options).then((request) => request(this.axios, this.basePath));
    }
}
