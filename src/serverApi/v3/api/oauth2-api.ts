/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsentRequestBody } from '../models';
// @ts-ignore
import { ConsentResponse } from '../models';
// @ts-ignore
import { ConsentSessionResponse } from '../models';
// @ts-ignore
import { LoginRequestBody } from '../models';
// @ts-ignore
import { LoginResponse } from '../models';
// @ts-ignore
import { OauthClientCreateBody } from '../models';
// @ts-ignore
import { OauthClientResponse } from '../models';
// @ts-ignore
import { OauthClientUpdateBody } from '../models';
// @ts-ignore
import { RedirectResponse } from '../models';
/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerAcceptLogoutRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('oauthProviderControllerAcceptLogoutRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/logoutRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OauthClientCreateBody} oauthClientCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerCreateOAuth2Client: async (oauthClientCreateBody: OauthClientCreateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthClientCreateBody' is not null or undefined
            assertParamExists('oauthProviderControllerCreateOAuth2Client', 'oauthClientCreateBody', oauthClientCreateBody)
            const localVarPath = `/oauth2/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthClientCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerDeleteOAuth2Client: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('oauthProviderControllerDeleteOAuth2Client', 'id', id)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetConsentRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('oauthProviderControllerGetConsentRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/consentRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetLoginRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('oauthProviderControllerGetLoginRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/loginRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetOAuth2Client: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('oauthProviderControllerGetOAuth2Client', 'id', id)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerListConsentSessions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerListOAuth2Clients: async (limit: number, offset: number, clientName: string, owner: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('oauthProviderControllerListOAuth2Clients', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('oauthProviderControllerListOAuth2Clients', 'offset', offset)
            // verify required parameter 'clientName' is not null or undefined
            assertParamExists('oauthProviderControllerListOAuth2Clients', 'clientName', clientName)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('oauthProviderControllerListOAuth2Clients', 'owner', owner)
            const localVarPath = `/oauth2/clients`
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"client_name"}}`, encodeURIComponent(String(clientName)))
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerPatchConsentRequest: async (challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('oauthProviderControllerPatchConsentRequest', 'challenge', challenge)
            // verify required parameter 'consentRequestBody' is not null or undefined
            assertParamExists('oauthProviderControllerPatchConsentRequest', 'consentRequestBody', consentRequestBody)
            const localVarPath = `/oauth2/consentRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accept !== undefined) {
                localVarQueryParameter['accept'] = accept;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerPatchLoginRequest: async (challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('oauthProviderControllerPatchLoginRequest', 'challenge', challenge)
            // verify required parameter 'loginRequestBody' is not null or undefined
            assertParamExists('oauthProviderControllerPatchLoginRequest', 'loginRequestBody', loginRequestBody)
            const localVarPath = `/oauth2/loginRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accept !== undefined) {
                localVarQueryParameter['accept'] = accept;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerRevokeConsentSession: async (client: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'client' is not null or undefined
            assertParamExists('oauthProviderControllerRevokeConsentSession', 'client', client)
            const localVarPath = `/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (client !== undefined) {
                localVarQueryParameter['client'] = client;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientUpdateBody} oauthClientUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerUpdateOAuth2Client: async (id: string, oauthClientUpdateBody: OauthClientUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('oauthProviderControllerUpdateOAuth2Client', 'id', id)
            // verify required parameter 'oauthClientUpdateBody' is not null or undefined
            assertParamExists('oauthProviderControllerUpdateOAuth2Client', 'oauthClientUpdateBody', oauthClientUpdateBody)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthClientUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerAcceptLogoutRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerAcceptLogoutRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OauthClientCreateBody} oauthClientCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody: OauthClientCreateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerDeleteOAuth2Client(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerDeleteOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerGetConsentRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerGetConsentRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerGetLoginRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerGetLoginRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerGetOAuth2Client(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerGetOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerListConsentSessions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsentSessionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerListConsentSessions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerListOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OauthClientResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerListOAuth2Clients(limit, offset, clientName, owner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerPatchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerPatchConsentRequest(challenge, consentRequestBody, accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerPatchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerPatchLoginRequest(challenge, loginRequestBody, accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerRevokeConsentSession(client: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerRevokeConsentSession(client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientUpdateBody} oauthClientUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthProviderControllerUpdateOAuth2Client(id: string, oauthClientUpdateBody: OauthClientUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthProviderControllerUpdateOAuth2Client(id, oauthClientUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerAcceptLogoutRequest(challenge: string, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.oauthProviderControllerAcceptLogoutRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OauthClientCreateBody} oauthClientCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody: OauthClientCreateBody, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerDeleteOAuth2Client(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.oauthProviderControllerDeleteOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetConsentRequest(challenge: string, options?: any): AxiosPromise<ConsentResponse> {
            return localVarFp.oauthProviderControllerGetConsentRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetLoginRequest(challenge: string, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.oauthProviderControllerGetLoginRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerGetOAuth2Client(id: string, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.oauthProviderControllerGetOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerListConsentSessions(options?: any): AxiosPromise<Array<ConsentSessionResponse>> {
            return localVarFp.oauthProviderControllerListConsentSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerListOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): AxiosPromise<Array<OauthClientResponse>> {
            return localVarFp.oauthProviderControllerListOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerPatchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.oauthProviderControllerPatchConsentRequest(challenge, consentRequestBody, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerPatchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.oauthProviderControllerPatchLoginRequest(challenge, loginRequestBody, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerRevokeConsentSession(client: string, options?: any): AxiosPromise<void> {
            return localVarFp.oauthProviderControllerRevokeConsentSession(client, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientUpdateBody} oauthClientUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthProviderControllerUpdateOAuth2Client(id: string, oauthClientUpdateBody: OauthClientUpdateBody, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.oauthProviderControllerUpdateOAuth2Client(id, oauthClientUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2Api - interface
 * @export
 * @interface Oauth2Api
 */
export interface Oauth2ApiInterface {
    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerAcceptLogoutRequest(challenge: string, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {OauthClientCreateBody} oauthClientCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody: OauthClientCreateBody, options?: any): AxiosPromise<OauthClientResponse>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerDeleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerGetConsentRequest(challenge: string, options?: any): AxiosPromise<ConsentResponse>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerGetLoginRequest(challenge: string, options?: any): AxiosPromise<LoginResponse>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerGetOAuth2Client(id: string, options?: any): AxiosPromise<OauthClientResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerListConsentSessions(options?: any): AxiosPromise<Array<ConsentSessionResponse>>;

    /**
     * 
     * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} offset The offset from where to start looking.
     * @param {string} clientName The name of the clients to filter by.
     * @param {string} owner The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerListOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): AxiosPromise<Array<OauthClientResponse>>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {ConsentRequestBody} consentRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerPatchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {LoginRequestBody} loginRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerPatchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {string} client The Oauth2 client id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerRevokeConsentSession(client: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {OauthClientUpdateBody} oauthClientUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauthProviderControllerUpdateOAuth2Client(id: string, oauthClientUpdateBody: OauthClientUpdateBody, options?: any): AxiosPromise<OauthClientResponse>;

}

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI implements Oauth2ApiInterface {
    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerAcceptLogoutRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerAcceptLogoutRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OauthClientCreateBody} oauthClientCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody: OauthClientCreateBody, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerCreateOAuth2Client(oauthClientCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerDeleteOAuth2Client(id: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerDeleteOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerGetConsentRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerGetConsentRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerGetLoginRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerGetLoginRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerGetOAuth2Client(id: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerGetOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerListConsentSessions(options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerListConsentSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} offset The offset from where to start looking.
     * @param {string} clientName The name of the clients to filter by.
     * @param {string} owner The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerListOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerListOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {ConsentRequestBody} consentRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerPatchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerPatchConsentRequest(challenge, consentRequestBody, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {LoginRequestBody} loginRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerPatchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerPatchLoginRequest(challenge, loginRequestBody, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} client The Oauth2 client id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerRevokeConsentSession(client: string, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerRevokeConsentSession(client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {OauthClientUpdateBody} oauthClientUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthProviderControllerUpdateOAuth2Client(id: string, oauthClientUpdateBody: OauthClientUpdateBody, options?: any) {
        return Oauth2ApiFp(this.configuration).oauthProviderControllerUpdateOAuth2Client(id, oauthClientUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}
