/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CollaborativeTextEditorParentType } from '../models';
// @ts-ignore
import { CollaborativeTextEditorResponse } from '../models';
/**
 * CollaborativeTextEditorApi - axios parameter creator
 * @export
 */
export const CollaborativeTextEditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete all etherpad sessions for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeTextEditorControllerDeleteSessionsByUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaborative-text-editor/delete-sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get or create CollaborativeTextEditor for parent
         * @param {string} parentId 
         * @param {CollaborativeTextEditorParentType} parentType Parent type of the collaborative text editor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent: async (parentId: string, parentType: CollaborativeTextEditorParentType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent', 'parentType', parentType)
            const localVarPath = `/collaborative-text-editor/{parentType}/{parentId}`
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollaborativeTextEditorApi - functional programming interface
 * @export
 */
export const CollaborativeTextEditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollaborativeTextEditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete all etherpad sessions for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collaborativeTextEditorControllerDeleteSessionsByUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collaborativeTextEditorControllerDeleteSessionsByUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get or create CollaborativeTextEditor for parent
         * @param {string} parentId 
         * @param {CollaborativeTextEditorParentType} parentType Parent type of the collaborative text editor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId: string, parentType: CollaborativeTextEditorParentType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborativeTextEditorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId, parentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollaborativeTextEditorApi - factory interface
 * @export
 */
export const CollaborativeTextEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollaborativeTextEditorApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete all etherpad sessions for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeTextEditorControllerDeleteSessionsByUser(options?: any): AxiosPromise<void> {
            return localVarFp.collaborativeTextEditorControllerDeleteSessionsByUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get or create CollaborativeTextEditor for parent
         * @param {string} parentId 
         * @param {CollaborativeTextEditorParentType} parentType Parent type of the collaborative text editor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId: string, parentType: CollaborativeTextEditorParentType, options?: any): AxiosPromise<CollaborativeTextEditorResponse> {
            return localVarFp.collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId, parentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollaborativeTextEditorApi - interface
 * @export
 * @interface CollaborativeTextEditorApi
 */
export interface CollaborativeTextEditorApiInterface {
    /**
     * 
     * @summary Delete all etherpad sessions for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeTextEditorApiInterface
     */
    collaborativeTextEditorControllerDeleteSessionsByUser(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get or create CollaborativeTextEditor for parent
     * @param {string} parentId 
     * @param {CollaborativeTextEditorParentType} parentType Parent type of the collaborative text editor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeTextEditorApiInterface
     */
    collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId: string, parentType: CollaborativeTextEditorParentType, options?: any): AxiosPromise<CollaborativeTextEditorResponse>;

}

/**
 * CollaborativeTextEditorApi - object-oriented interface
 * @export
 * @class CollaborativeTextEditorApi
 * @extends {BaseAPI}
 */
export class CollaborativeTextEditorApi extends BaseAPI implements CollaborativeTextEditorApiInterface {
    /**
     * 
     * @summary Delete all etherpad sessions for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeTextEditorApi
     */
    public collaborativeTextEditorControllerDeleteSessionsByUser(options?: any) {
        return CollaborativeTextEditorApiFp(this.configuration).collaborativeTextEditorControllerDeleteSessionsByUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get or create CollaborativeTextEditor for parent
     * @param {string} parentId 
     * @param {CollaborativeTextEditorParentType} parentType Parent type of the collaborative text editor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborativeTextEditorApi
     */
    public collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId: string, parentType: CollaborativeTextEditorParentType, options?: any) {
        return CollaborativeTextEditorApiFp(this.configuration).collaborativeTextEditorControllerGetOrCreateCollaborativeTextEditorForParent(parentId, parentType, options).then((request) => request(this.axios, this.basePath));
    }
}
