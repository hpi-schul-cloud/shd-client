/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CardResponse } from '../models';
// @ts-ignore
import { CreateCardBodyParams } from '../models';
// @ts-ignore
import { MoveColumnBodyParams } from '../models';
// @ts-ignore
import { RenameBodyParams } from '../models';
/**
 * BoardColumnApi - axios parameter creator
 * @export
 */
export const BoardColumnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new card on a column.
         * @param {string} columnId The id of the column.
         * @param {CreateCardBodyParams} [createCardBodyParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerCreateCard: async (columnId: string, createCardBodyParams?: CreateCardBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnControllerCreateCard', 'columnId', columnId)
            const localVarPath = `/columns/{columnId}/cards`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCardBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single column.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerDeleteColumn: async (columnId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnControllerDeleteColumn', 'columnId', columnId)
            const localVarPath = `/columns/{columnId}`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move a single column.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerMoveColumn: async (columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnControllerMoveColumn', 'columnId', columnId)
            // verify required parameter 'moveColumnBodyParams' is not null or undefined
            assertParamExists('columnControllerMoveColumn', 'moveColumnBodyParams', moveColumnBodyParams)
            const localVarPath = `/columns/{columnId}/position`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveColumnBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the title of a single column.
         * @param {string} columnId The id of the column.
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerUpdateColumnTitle: async (columnId: string, renameBodyParams: RenameBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnControllerUpdateColumnTitle', 'columnId', columnId)
            // verify required parameter 'renameBodyParams' is not null or undefined
            assertParamExists('columnControllerUpdateColumnTitle', 'renameBodyParams', renameBodyParams)
            const localVarPath = `/columns/{columnId}/title`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardColumnApi - functional programming interface
 * @export
 */
export const BoardColumnApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardColumnApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new card on a column.
         * @param {string} columnId The id of the column.
         * @param {CreateCardBodyParams} [createCardBodyParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnControllerCreateCard(columnId: string, createCardBodyParams?: CreateCardBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnControllerCreateCard(columnId, createCardBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single column.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnControllerDeleteColumn(columnId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnControllerDeleteColumn(columnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move a single column.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnControllerMoveColumn(columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnControllerMoveColumn(columnId, moveColumnBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the title of a single column.
         * @param {string} columnId The id of the column.
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnControllerUpdateColumnTitle(columnId: string, renameBodyParams: RenameBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnControllerUpdateColumnTitle(columnId, renameBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardColumnApi - factory interface
 * @export
 */
export const BoardColumnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardColumnApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new card on a column.
         * @param {string} columnId The id of the column.
         * @param {CreateCardBodyParams} [createCardBodyParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerCreateCard(columnId: string, createCardBodyParams?: CreateCardBodyParams, options?: any): AxiosPromise<CardResponse> {
            return localVarFp.columnControllerCreateCard(columnId, createCardBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single column.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerDeleteColumn(columnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.columnControllerDeleteColumn(columnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move a single column.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerMoveColumn(columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.columnControllerMoveColumn(columnId, moveColumnBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the title of a single column.
         * @param {string} columnId The id of the column.
         * @param {RenameBodyParams} renameBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnControllerUpdateColumnTitle(columnId: string, renameBodyParams: RenameBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.columnControllerUpdateColumnTitle(columnId, renameBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardColumnApi - interface
 * @export
 * @interface BoardColumnApi
 */
export interface BoardColumnApiInterface {
    /**
     * 
     * @summary Create a new card on a column.
     * @param {string} columnId The id of the column.
     * @param {CreateCardBodyParams} [createCardBodyParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApiInterface
     */
    columnControllerCreateCard(columnId: string, createCardBodyParams?: CreateCardBodyParams, options?: any): AxiosPromise<CardResponse>;

    /**
     * 
     * @summary Delete a single column.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApiInterface
     */
    columnControllerDeleteColumn(columnId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Move a single column.
     * @param {string} columnId The id of the column.
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApiInterface
     */
    columnControllerMoveColumn(columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Update the title of a single column.
     * @param {string} columnId The id of the column.
     * @param {RenameBodyParams} renameBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApiInterface
     */
    columnControllerUpdateColumnTitle(columnId: string, renameBodyParams: RenameBodyParams, options?: any): AxiosPromise<void>;

}

/**
 * BoardColumnApi - object-oriented interface
 * @export
 * @class BoardColumnApi
 * @extends {BaseAPI}
 */
export class BoardColumnApi extends BaseAPI implements BoardColumnApiInterface {
    /**
     * 
     * @summary Create a new card on a column.
     * @param {string} columnId The id of the column.
     * @param {CreateCardBodyParams} [createCardBodyParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApi
     */
    public columnControllerCreateCard(columnId: string, createCardBodyParams?: CreateCardBodyParams, options?: any) {
        return BoardColumnApiFp(this.configuration).columnControllerCreateCard(columnId, createCardBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single column.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApi
     */
    public columnControllerDeleteColumn(columnId: string, options?: any) {
        return BoardColumnApiFp(this.configuration).columnControllerDeleteColumn(columnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move a single column.
     * @param {string} columnId The id of the column.
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApi
     */
    public columnControllerMoveColumn(columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any) {
        return BoardColumnApiFp(this.configuration).columnControllerMoveColumn(columnId, moveColumnBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the title of a single column.
     * @param {string} columnId The id of the column.
     * @param {RenameBodyParams} renameBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardColumnApi
     */
    public columnControllerUpdateColumnTitle(columnId: string, renameBodyParams: RenameBodyParams, options?: any) {
        return BoardColumnApiFp(this.configuration).columnControllerUpdateColumnTitle(columnId, renameBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}
