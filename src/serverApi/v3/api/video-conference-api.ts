/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VideoConferenceCreateParams } from '../models';
// @ts-ignore
import { VideoConferenceInfoResponse } from '../models';
// @ts-ignore
import { VideoConferenceJoinResponse } from '../models';
// @ts-ignore
import { VideoConferenceScope } from '../models';
/**
 * VideoConferenceApi - axios parameter creator
 * @export
 */
export const VideoConferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to end a running video conference.
         * @summary Ends a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerEnd: async (scope: VideoConferenceScope, scopeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceControllerEnd', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceControllerEnd', 'scopeId', scopeId)
            const localVarPath = `/videoconference2/{scope}/{scopeId}/end`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get information about a running video conference.
         * @summary Returns information about a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerInfo: async (scope: VideoConferenceScope, scopeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceControllerInfo', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceControllerInfo', 'scopeId', scopeId)
            const localVarPath = `/videoconference2/{scope}/{scopeId}/info`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get a link to join an existing video conference. The conference must be running.
         * @summary Creates a join link for a video conference, if it has started.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerJoin: async (scope: VideoConferenceScope, scopeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceControllerJoin', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceControllerJoin', 'scopeId', scopeId)
            const localVarPath = `/videoconference2/{scope}/{scopeId}/join`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to start a video conference. If the conference is not yet running, it will be created.
         * @summary Creates the video conference, if it has not started yet.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerStart: async (scope: VideoConferenceScope, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceControllerStart', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceControllerStart', 'scopeId', scopeId)
            // verify required parameter 'videoConferenceCreateParams' is not null or undefined
            assertParamExists('videoConferenceControllerStart', 'videoConferenceCreateParams', videoConferenceCreateParams)
            const localVarPath = `/videoconference2/{scope}/{scopeId}/start`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoConferenceCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a join link for a video conference and creates the video conference, if it has not started yet.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerCreateAndJoin: async (scope: string, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerCreateAndJoin', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerCreateAndJoin', 'scopeId', scopeId)
            // verify required parameter 'videoConferenceCreateParams' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerCreateAndJoin', 'videoConferenceCreateParams', videoConferenceCreateParams)
            const localVarPath = `/videoconference/{scope}/{scopeId}`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoConferenceCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ends a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerEnd: async (scope: string, scopeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerEnd', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerEnd', 'scopeId', scopeId)
            const localVarPath = `/videoconference/{scope}/{scopeId}`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerInfo: async (scope: string, scopeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerInfo', 'scope', scope)
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('videoConferenceDeprecatedControllerInfo', 'scopeId', scopeId)
            const localVarPath = `/videoconference/{scope}/{scopeId}`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoConferenceApi - functional programming interface
 * @export
 */
export const VideoConferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoConferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to end a running video conference.
         * @summary Ends a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceControllerEnd(scope: VideoConferenceScope, scopeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceControllerEnd(scope, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get information about a running video conference.
         * @summary Returns information about a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceControllerInfo(scope: VideoConferenceScope, scopeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoConferenceInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceControllerInfo(scope, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get a link to join an existing video conference. The conference must be running.
         * @summary Creates a join link for a video conference, if it has started.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceControllerJoin(scope: VideoConferenceScope, scopeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoConferenceJoinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceControllerJoin(scope, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to start a video conference. If the conference is not yet running, it will be created.
         * @summary Creates the video conference, if it has not started yet.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceControllerStart(scope: VideoConferenceScope, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceControllerStart(scope, scopeId, videoConferenceCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a join link for a video conference and creates the video conference, if it has not started yet.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceDeprecatedControllerCreateAndJoin(scope: string, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceDeprecatedControllerCreateAndJoin(scope, scopeId, videoConferenceCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Ends a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceDeprecatedControllerEnd(scope: string, scopeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceDeprecatedControllerEnd(scope, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns information about a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoConferenceDeprecatedControllerInfo(scope: string, scopeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoConferenceDeprecatedControllerInfo(scope, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideoConferenceApi - factory interface
 * @export
 */
export const VideoConferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoConferenceApiFp(configuration)
    return {
        /**
         * Use this endpoint to end a running video conference.
         * @summary Ends a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerEnd(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.videoConferenceControllerEnd(scope, scopeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get information about a running video conference.
         * @summary Returns information about a running video conference.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerInfo(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<VideoConferenceInfoResponse> {
            return localVarFp.videoConferenceControllerInfo(scope, scopeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get a link to join an existing video conference. The conference must be running.
         * @summary Creates a join link for a video conference, if it has started.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerJoin(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<VideoConferenceJoinResponse> {
            return localVarFp.videoConferenceControllerJoin(scope, scopeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to start a video conference. If the conference is not yet running, it will be created.
         * @summary Creates the video conference, if it has not started yet.
         * @param {VideoConferenceScope} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceControllerStart(scope: VideoConferenceScope, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): AxiosPromise<void> {
            return localVarFp.videoConferenceControllerStart(scope, scopeId, videoConferenceCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a join link for a video conference and creates the video conference, if it has not started yet.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerCreateAndJoin(scope: string, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): AxiosPromise<object> {
            return localVarFp.videoConferenceDeprecatedControllerCreateAndJoin(scope, scopeId, videoConferenceCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ends a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerEnd(scope: string, scopeId: string, options?: any): AxiosPromise<object> {
            return localVarFp.videoConferenceDeprecatedControllerEnd(scope, scopeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns information about a running video conference.
         * @param {string} scope 
         * @param {string} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoConferenceDeprecatedControllerInfo(scope: string, scopeId: string, options?: any): AxiosPromise<object> {
            return localVarFp.videoConferenceDeprecatedControllerInfo(scope, scopeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoConferenceApi - interface
 * @export
 * @interface VideoConferenceApi
 */
export interface VideoConferenceApiInterface {
    /**
     * Use this endpoint to end a running video conference.
     * @summary Ends a running video conference.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceControllerEnd(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<void>;

    /**
     * Use this endpoint to get information about a running video conference.
     * @summary Returns information about a running video conference.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceControllerInfo(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<VideoConferenceInfoResponse>;

    /**
     * Use this endpoint to get a link to join an existing video conference. The conference must be running.
     * @summary Creates a join link for a video conference, if it has started.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceControllerJoin(scope: VideoConferenceScope, scopeId: string, options?: any): AxiosPromise<VideoConferenceJoinResponse>;

    /**
     * Use this endpoint to start a video conference. If the conference is not yet running, it will be created.
     * @summary Creates the video conference, if it has not started yet.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceControllerStart(scope: VideoConferenceScope, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Creates a join link for a video conference and creates the video conference, if it has not started yet.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceDeprecatedControllerCreateAndJoin(scope: string, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any): AxiosPromise<object>;

    /**
     * 
     * @summary Ends a running video conference.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceDeprecatedControllerEnd(scope: string, scopeId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @summary Returns information about a running video conference.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApiInterface
     */
    videoConferenceDeprecatedControllerInfo(scope: string, scopeId: string, options?: any): AxiosPromise<object>;

}

/**
 * VideoConferenceApi - object-oriented interface
 * @export
 * @class VideoConferenceApi
 * @extends {BaseAPI}
 */
export class VideoConferenceApi extends BaseAPI implements VideoConferenceApiInterface {
    /**
     * Use this endpoint to end a running video conference.
     * @summary Ends a running video conference.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceControllerEnd(scope: VideoConferenceScope, scopeId: string, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceControllerEnd(scope, scopeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to get information about a running video conference.
     * @summary Returns information about a running video conference.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceControllerInfo(scope: VideoConferenceScope, scopeId: string, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceControllerInfo(scope, scopeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to get a link to join an existing video conference. The conference must be running.
     * @summary Creates a join link for a video conference, if it has started.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceControllerJoin(scope: VideoConferenceScope, scopeId: string, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceControllerJoin(scope, scopeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to start a video conference. If the conference is not yet running, it will be created.
     * @summary Creates the video conference, if it has not started yet.
     * @param {VideoConferenceScope} scope 
     * @param {string} scopeId 
     * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceControllerStart(scope: VideoConferenceScope, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceControllerStart(scope, scopeId, videoConferenceCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a join link for a video conference and creates the video conference, if it has not started yet.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {VideoConferenceCreateParams} videoConferenceCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceDeprecatedControllerCreateAndJoin(scope: string, scopeId: string, videoConferenceCreateParams: VideoConferenceCreateParams, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceDeprecatedControllerCreateAndJoin(scope, scopeId, videoConferenceCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ends a running video conference.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceDeprecatedControllerEnd(scope: string, scopeId: string, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceDeprecatedControllerEnd(scope, scopeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns information about a running video conference.
     * @param {string} scope 
     * @param {string} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoConferenceApi
     */
    public videoConferenceDeprecatedControllerInfo(scope: string, scopeId: string, options?: any) {
        return VideoConferenceApiFp(this.configuration).videoConferenceDeprecatedControllerInfo(scope, scopeId, options).then((request) => request(this.axios, this.basePath));
    }
}
