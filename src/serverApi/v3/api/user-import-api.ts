/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ImportUserListResponse } from '../models';
// @ts-ignore
import { ImportUserResponse } from '../models';
// @ts-ignore
import { UpdateFlagParams } from '../models';
// @ts-ignore
import { UpdateMatchParams } from '../models';
// @ts-ignore
import { UserMatchListResponse } from '../models';
/**
 * UserImportApi - axios parameter creator
 * @export
 */
export const UserImportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel current migration process
         * @summary Cancel migration wizard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerCancelMigration: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerEndSchoolInMaintenance: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import/startSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [loginName] 
         * @param {Array<'auto' | 'admin' | 'none'>} [match] 
         * @param {boolean} [flagged] 
         * @param {string} [classes] 
         * @param {'student' | 'teacher' | 'admin'} [role] 
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'firstName' | 'lastName'} [sortBy] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerFindAllImportUsers: async (firstName?: string, lastName?: string, loginName?: string, match?: Array<'auto' | 'admin' | 'none'>, flagged?: boolean, classes?: string, role?: 'student' | 'teacher' | 'admin', sortOrder?: 'asc' | 'desc', sortBy?: 'firstName' | 'lastName', skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (loginName !== undefined) {
                localVarQueryParameter['loginName'] = loginName;
            }

            if (match) {
                localVarQueryParameter['match'] = match;
            }

            if (flagged !== undefined) {
                localVarQueryParameter['flagged'] = flagged;
            }

            if (classes !== undefined) {
                localVarQueryParameter['classes'] = classes;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerFindAllUnmatchedUsers: async (name?: string, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import/unassigned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Populates import users from specific user migration populate endpoint.
         * @summary Populates import users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerPopulateImportUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import/populate-import-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerRemoveMatch: async (importUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importUserId' is not null or undefined
            assertParamExists('importUserControllerRemoveMatch', 'importUserId', importUserId)
            const localVarPath = `/user/import/{importUserId}/match`
                .replace(`{${"importUserId"}}`, encodeURIComponent(String(importUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerSaveAllUsersMatches: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/import/migrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateMatchParams} updateMatchParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerSetMatch: async (importUserId: string, updateMatchParams: UpdateMatchParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importUserId' is not null or undefined
            assertParamExists('importUserControllerSetMatch', 'importUserId', importUserId)
            // verify required parameter 'updateMatchParams' is not null or undefined
            assertParamExists('importUserControllerSetMatch', 'updateMatchParams', updateMatchParams)
            const localVarPath = `/user/import/{importUserId}/match`
                .replace(`{${"importUserId"}}`, encodeURIComponent(String(importUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMatchParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} useCentralLdap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerStartSchoolInUserMigration: async (useCentralLdap: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'useCentralLdap' is not null or undefined
            assertParamExists('importUserControllerStartSchoolInUserMigration', 'useCentralLdap', useCentralLdap)
            const localVarPath = `/user/import/startUserMigration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (useCentralLdap !== undefined) {
                localVarQueryParameter['useCentralLdap'] = useCentralLdap;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateFlagParams} updateFlagParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerUpdateFlag: async (importUserId: string, updateFlagParams: UpdateFlagParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importUserId' is not null or undefined
            assertParamExists('importUserControllerUpdateFlag', 'importUserId', importUserId)
            // verify required parameter 'updateFlagParams' is not null or undefined
            assertParamExists('importUserControllerUpdateFlag', 'updateFlagParams', updateFlagParams)
            const localVarPath = `/user/import/{importUserId}/flag`
                .replace(`{${"importUserId"}}`, encodeURIComponent(String(importUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFlagParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserImportApi - functional programming interface
 * @export
 */
export const UserImportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserImportApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel current migration process
         * @summary Cancel migration wizard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerCancelMigration(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerCancelMigration(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerEndSchoolInMaintenance(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerEndSchoolInMaintenance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [loginName] 
         * @param {Array<'auto' | 'admin' | 'none'>} [match] 
         * @param {boolean} [flagged] 
         * @param {string} [classes] 
         * @param {'student' | 'teacher' | 'admin'} [role] 
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'firstName' | 'lastName'} [sortBy] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerFindAllImportUsers(firstName?: string, lastName?: string, loginName?: string, match?: Array<'auto' | 'admin' | 'none'>, flagged?: boolean, classes?: string, role?: 'student' | 'teacher' | 'admin', sortOrder?: 'asc' | 'desc', sortBy?: 'firstName' | 'lastName', skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerFindAllImportUsers(firstName, lastName, loginName, match, flagged, classes, role, sortOrder, sortBy, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerFindAllUnmatchedUsers(name?: string, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMatchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerFindAllUnmatchedUsers(name, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Populates import users from specific user migration populate endpoint.
         * @summary Populates import users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerPopulateImportUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerPopulateImportUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerRemoveMatch(importUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerRemoveMatch(importUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerSaveAllUsersMatches(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerSaveAllUsersMatches(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateMatchParams} updateMatchParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerSetMatch(importUserId: string, updateMatchParams: UpdateMatchParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerSetMatch(importUserId, updateMatchParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} useCentralLdap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerStartSchoolInUserMigration(useCentralLdap: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerStartSchoolInUserMigration(useCentralLdap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateFlagParams} updateFlagParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUserControllerUpdateFlag(importUserId: string, updateFlagParams: UpdateFlagParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUserControllerUpdateFlag(importUserId, updateFlagParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserImportApi - factory interface
 * @export
 */
export const UserImportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserImportApiFp(configuration)
    return {
        /**
         * Cancel current migration process
         * @summary Cancel migration wizard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerCancelMigration(options?: any): AxiosPromise<void> {
            return localVarFp.importUserControllerCancelMigration(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerEndSchoolInMaintenance(options?: any): AxiosPromise<void> {
            return localVarFp.importUserControllerEndSchoolInMaintenance(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [loginName] 
         * @param {Array<'auto' | 'admin' | 'none'>} [match] 
         * @param {boolean} [flagged] 
         * @param {string} [classes] 
         * @param {'student' | 'teacher' | 'admin'} [role] 
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'firstName' | 'lastName'} [sortBy] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerFindAllImportUsers(firstName?: string, lastName?: string, loginName?: string, match?: Array<'auto' | 'admin' | 'none'>, flagged?: boolean, classes?: string, role?: 'student' | 'teacher' | 'admin', sortOrder?: 'asc' | 'desc', sortBy?: 'firstName' | 'lastName', skip?: number, limit?: number, options?: any): AxiosPromise<ImportUserListResponse> {
            return localVarFp.importUserControllerFindAllImportUsers(firstName, lastName, loginName, match, flagged, classes, role, sortOrder, sortBy, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerFindAllUnmatchedUsers(name?: string, skip?: number, limit?: number, options?: any): AxiosPromise<UserMatchListResponse> {
            return localVarFp.importUserControllerFindAllUnmatchedUsers(name, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Populates import users from specific user migration populate endpoint.
         * @summary Populates import users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerPopulateImportUsers(options?: any): AxiosPromise<void> {
            return localVarFp.importUserControllerPopulateImportUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerRemoveMatch(importUserId: string, options?: any): AxiosPromise<ImportUserResponse> {
            return localVarFp.importUserControllerRemoveMatch(importUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerSaveAllUsersMatches(options?: any): AxiosPromise<void> {
            return localVarFp.importUserControllerSaveAllUsersMatches(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateMatchParams} updateMatchParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerSetMatch(importUserId: string, updateMatchParams: UpdateMatchParams, options?: any): AxiosPromise<ImportUserResponse> {
            return localVarFp.importUserControllerSetMatch(importUserId, updateMatchParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} useCentralLdap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerStartSchoolInUserMigration(useCentralLdap: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.importUserControllerStartSchoolInUserMigration(useCentralLdap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
         * @param {UpdateFlagParams} updateFlagParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUserControllerUpdateFlag(importUserId: string, updateFlagParams: UpdateFlagParams, options?: any): AxiosPromise<ImportUserResponse> {
            return localVarFp.importUserControllerUpdateFlag(importUserId, updateFlagParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserImportApi - interface
 * @export
 * @interface UserImportApi
 */
export interface UserImportApiInterface {
    /**
     * Cancel current migration process
     * @summary Cancel migration wizard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerCancelMigration(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerEndSchoolInMaintenance(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [loginName] 
     * @param {Array<'auto' | 'admin' | 'none'>} [match] 
     * @param {boolean} [flagged] 
     * @param {string} [classes] 
     * @param {'student' | 'teacher' | 'admin'} [role] 
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'firstName' | 'lastName'} [sortBy] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerFindAllImportUsers(firstName?: string, lastName?: string, loginName?: string, match?: Array<'auto' | 'admin' | 'none'>, flagged?: boolean, classes?: string, role?: 'student' | 'teacher' | 'admin', sortOrder?: 'asc' | 'desc', sortBy?: 'firstName' | 'lastName', skip?: number, limit?: number, options?: any): AxiosPromise<ImportUserListResponse>;

    /**
     * 
     * @param {string} [name] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerFindAllUnmatchedUsers(name?: string, skip?: number, limit?: number, options?: any): AxiosPromise<UserMatchListResponse>;

    /**
     * Populates import users from specific user migration populate endpoint.
     * @summary Populates import users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerPopulateImportUsers(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerRemoveMatch(importUserId: string, options?: any): AxiosPromise<ImportUserResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerSaveAllUsersMatches(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {UpdateMatchParams} updateMatchParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerSetMatch(importUserId: string, updateMatchParams: UpdateMatchParams, options?: any): AxiosPromise<ImportUserResponse>;

    /**
     * 
     * @param {boolean} useCentralLdap 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerStartSchoolInUserMigration(useCentralLdap: boolean, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {UpdateFlagParams} updateFlagParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApiInterface
     */
    importUserControllerUpdateFlag(importUserId: string, updateFlagParams: UpdateFlagParams, options?: any): AxiosPromise<ImportUserResponse>;

}

/**
 * UserImportApi - object-oriented interface
 * @export
 * @class UserImportApi
 * @extends {BaseAPI}
 */
export class UserImportApi extends BaseAPI implements UserImportApiInterface {
    /**
     * Cancel current migration process
     * @summary Cancel migration wizard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerCancelMigration(options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerCancelMigration(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerEndSchoolInMaintenance(options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerEndSchoolInMaintenance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [loginName] 
     * @param {Array<'auto' | 'admin' | 'none'>} [match] 
     * @param {boolean} [flagged] 
     * @param {string} [classes] 
     * @param {'student' | 'teacher' | 'admin'} [role] 
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'firstName' | 'lastName'} [sortBy] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerFindAllImportUsers(firstName?: string, lastName?: string, loginName?: string, match?: Array<'auto' | 'admin' | 'none'>, flagged?: boolean, classes?: string, role?: 'student' | 'teacher' | 'admin', sortOrder?: 'asc' | 'desc', sortBy?: 'firstName' | 'lastName', skip?: number, limit?: number, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerFindAllImportUsers(firstName, lastName, loginName, match, flagged, classes, role, sortOrder, sortBy, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerFindAllUnmatchedUsers(name?: string, skip?: number, limit?: number, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerFindAllUnmatchedUsers(name, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Populates import users from specific user migration populate endpoint.
     * @summary Populates import users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerPopulateImportUsers(options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerPopulateImportUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerRemoveMatch(importUserId: string, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerRemoveMatch(importUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerSaveAllUsersMatches(options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerSaveAllUsersMatches(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {UpdateMatchParams} updateMatchParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerSetMatch(importUserId: string, updateMatchParams: UpdateMatchParams, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerSetMatch(importUserId, updateMatchParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} useCentralLdap 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerStartSchoolInUserMigration(useCentralLdap: boolean, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerStartSchoolInUserMigration(useCentralLdap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} importUserId The id of an importuser object, that matches an internal user with an external user.
     * @param {UpdateFlagParams} updateFlagParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserImportApi
     */
    public importUserControllerUpdateFlag(importUserId: string, updateFlagParams: UpdateFlagParams, options?: any) {
        return UserImportApiFp(this.configuration).importUserControllerUpdateFlag(importUserId, updateFlagParams, options).then((request) => request(this.axios, this.basePath));
    }
}
