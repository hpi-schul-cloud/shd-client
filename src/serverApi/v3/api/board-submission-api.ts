/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CreateContentElementBodyParams } from '../models';
// @ts-ignore
import { FileElementResponse } from '../models';
// @ts-ignore
import { RichTextElementResponse } from '../models';
// @ts-ignore
import { SubmissionsResponse } from '../models';
// @ts-ignore
import { UpdateSubmissionItemBodyParams } from '../models';
/**
 * BoardSubmissionApi - axios parameter creator
 * @export
 */
export const BoardSubmissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new element in a submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {CreateContentElementBodyParams} createContentElementBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerCreateElement: async (submissionItemId: string, createContentElementBodyParams: CreateContentElementBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionItemId' is not null or undefined
            assertParamExists('boardSubmissionControllerCreateElement', 'submissionItemId', submissionItemId)
            // verify required parameter 'createContentElementBodyParams' is not null or undefined
            assertParamExists('boardSubmissionControllerCreateElement', 'createContentElementBodyParams', createContentElementBodyParams)
            const localVarPath = `/board-submissions/{submissionItemId}/elements`
                .replace(`{${"submissionItemId"}}`, encodeURIComponent(String(submissionItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContentElementBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerDeleteSubmissionItem: async (submissionItemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionItemId' is not null or undefined
            assertParamExists('boardSubmissionControllerDeleteSubmissionItem', 'submissionItemId', submissionItemId)
            const localVarPath = `/board-submissions/{submissionItemId}`
                .replace(`{${"submissionItemId"}}`, encodeURIComponent(String(submissionItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of submission items by their parent container.
         * @param {string} submissionContainerId The id of the submission container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerGetSubmissionItems: async (submissionContainerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionContainerId' is not null or undefined
            assertParamExists('boardSubmissionControllerGetSubmissionItems', 'submissionContainerId', submissionContainerId)
            const localVarPath = `/board-submissions/{submissionContainerId}`
                .replace(`{${"submissionContainerId"}}`, encodeURIComponent(String(submissionContainerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {UpdateSubmissionItemBodyParams} updateSubmissionItemBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerUpdateSubmissionItem: async (submissionItemId: string, updateSubmissionItemBodyParams: UpdateSubmissionItemBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionItemId' is not null or undefined
            assertParamExists('boardSubmissionControllerUpdateSubmissionItem', 'submissionItemId', submissionItemId)
            // verify required parameter 'updateSubmissionItemBodyParams' is not null or undefined
            assertParamExists('boardSubmissionControllerUpdateSubmissionItem', 'updateSubmissionItemBodyParams', updateSubmissionItemBodyParams)
            const localVarPath = `/board-submissions/{submissionItemId}`
                .replace(`{${"submissionItemId"}}`, encodeURIComponent(String(submissionItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSubmissionItemBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardSubmissionApi - functional programming interface
 * @export
 */
export const BoardSubmissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardSubmissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new element in a submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {CreateContentElementBodyParams} createContentElementBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSubmissionControllerCreateElement(submissionItemId: string, createContentElementBodyParams: CreateContentElementBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RichTextElementResponse | FileElementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSubmissionControllerCreateElement(submissionItemId, createContentElementBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSubmissionControllerDeleteSubmissionItem(submissionItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSubmissionControllerDeleteSubmissionItem(submissionItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of submission items by their parent container.
         * @param {string} submissionContainerId The id of the submission container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSubmissionControllerGetSubmissionItems(submissionContainerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSubmissionControllerGetSubmissionItems(submissionContainerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {UpdateSubmissionItemBodyParams} updateSubmissionItemBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSubmissionControllerUpdateSubmissionItem(submissionItemId: string, updateSubmissionItemBodyParams: UpdateSubmissionItemBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSubmissionControllerUpdateSubmissionItem(submissionItemId, updateSubmissionItemBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardSubmissionApi - factory interface
 * @export
 */
export const BoardSubmissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardSubmissionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new element in a submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {CreateContentElementBodyParams} createContentElementBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerCreateElement(submissionItemId: string, createContentElementBodyParams: CreateContentElementBodyParams, options?: any): AxiosPromise<RichTextElementResponse | FileElementResponse> {
            return localVarFp.boardSubmissionControllerCreateElement(submissionItemId, createContentElementBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerDeleteSubmissionItem(submissionItemId: string, options?: any): AxiosPromise<void> {
            return localVarFp.boardSubmissionControllerDeleteSubmissionItem(submissionItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of submission items by their parent container.
         * @param {string} submissionContainerId The id of the submission container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerGetSubmissionItems(submissionContainerId: string, options?: any): AxiosPromise<SubmissionsResponse> {
            return localVarFp.boardSubmissionControllerGetSubmissionItems(submissionContainerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single submission item.
         * @param {string} submissionItemId The id of the submission item.
         * @param {UpdateSubmissionItemBodyParams} updateSubmissionItemBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSubmissionControllerUpdateSubmissionItem(submissionItemId: string, updateSubmissionItemBodyParams: UpdateSubmissionItemBodyParams, options?: any): AxiosPromise<void> {
            return localVarFp.boardSubmissionControllerUpdateSubmissionItem(submissionItemId, updateSubmissionItemBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardSubmissionApi - interface
 * @export
 * @interface BoardSubmissionApi
 */
export interface BoardSubmissionApiInterface {
    /**
     * 
     * @summary Create a new element in a submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {CreateContentElementBodyParams} createContentElementBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApiInterface
     */
    boardSubmissionControllerCreateElement(submissionItemId: string, createContentElementBodyParams: CreateContentElementBodyParams, options?: any): AxiosPromise<RichTextElementResponse | FileElementResponse>;

    /**
     * 
     * @summary Delete a single submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApiInterface
     */
    boardSubmissionControllerDeleteSubmissionItem(submissionItemId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get a list of submission items by their parent container.
     * @param {string} submissionContainerId The id of the submission container.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApiInterface
     */
    boardSubmissionControllerGetSubmissionItems(submissionContainerId: string, options?: any): AxiosPromise<SubmissionsResponse>;

    /**
     * 
     * @summary Update a single submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {UpdateSubmissionItemBodyParams} updateSubmissionItemBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApiInterface
     */
    boardSubmissionControllerUpdateSubmissionItem(submissionItemId: string, updateSubmissionItemBodyParams: UpdateSubmissionItemBodyParams, options?: any): AxiosPromise<void>;

}

/**
 * BoardSubmissionApi - object-oriented interface
 * @export
 * @class BoardSubmissionApi
 * @extends {BaseAPI}
 */
export class BoardSubmissionApi extends BaseAPI implements BoardSubmissionApiInterface {
    /**
     * 
     * @summary Create a new element in a submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {CreateContentElementBodyParams} createContentElementBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApi
     */
    public boardSubmissionControllerCreateElement(submissionItemId: string, createContentElementBodyParams: CreateContentElementBodyParams, options?: any) {
        return BoardSubmissionApiFp(this.configuration).boardSubmissionControllerCreateElement(submissionItemId, createContentElementBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApi
     */
    public boardSubmissionControllerDeleteSubmissionItem(submissionItemId: string, options?: any) {
        return BoardSubmissionApiFp(this.configuration).boardSubmissionControllerDeleteSubmissionItem(submissionItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of submission items by their parent container.
     * @param {string} submissionContainerId The id of the submission container.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApi
     */
    public boardSubmissionControllerGetSubmissionItems(submissionContainerId: string, options?: any) {
        return BoardSubmissionApiFp(this.configuration).boardSubmissionControllerGetSubmissionItems(submissionContainerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single submission item.
     * @param {string} submissionItemId The id of the submission item.
     * @param {UpdateSubmissionItemBodyParams} updateSubmissionItemBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardSubmissionApi
     */
    public boardSubmissionControllerUpdateSubmissionItem(submissionItemId: string, updateSubmissionItemBodyParams: UpdateSubmissionItemBodyParams, options?: any) {
        return BoardSubmissionApiFp(this.configuration).boardSubmissionControllerUpdateSubmissionItem(submissionItemId, updateSubmissionItemBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}
