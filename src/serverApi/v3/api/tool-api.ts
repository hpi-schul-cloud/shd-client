/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContextExternalToolBodyParams } from '../models';
// @ts-ignore
import { ContextExternalToolConfigurationTemplateListResponse } from '../models';
// @ts-ignore
import { ContextExternalToolConfigurationTemplateResponse } from '../models';
// @ts-ignore
import { ContextExternalToolPostParams } from '../models';
// @ts-ignore
import { ContextExternalToolResponse } from '../models';
// @ts-ignore
import { ContextExternalToolSearchListResponse } from '../models';
// @ts-ignore
import { ExternalToolBulkCreateParams } from '../models';
// @ts-ignore
import { ExternalToolCreateParams } from '../models';
// @ts-ignore
import { ExternalToolMetadataResponse } from '../models';
// @ts-ignore
import { ExternalToolResponse } from '../models';
// @ts-ignore
import { ExternalToolSearchListResponse } from '../models';
// @ts-ignore
import { ExternalToolUpdateParams } from '../models';
// @ts-ignore
import { SchoolExternalToolConfigurationTemplateListResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolConfigurationTemplateResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolMetadataResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolPostParams } from '../models';
// @ts-ignore
import { SchoolExternalToolResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolSearchListResponse } from '../models';
// @ts-ignore
import { ToolContextType } from '../models';
// @ts-ignore
import { ToolContextTypesListResponse } from '../models';
// @ts-ignore
import { ToolLaunchRequestResponse } from '../models';
// @ts-ignore
import { ToolReferenceListResponse } from '../models';
// @ts-ignore
import { ToolReferenceResponse } from '../models';
// @ts-ignore
import { ValidationError } from '../models';
/**
 * ToolApi - axios parameter creator
 * @export
 */
export const ToolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lists all available tools that can be added for a given context
         * @param {any} contextType 
         * @param {string} contextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetAvailableToolsForContext: async (contextType: any, contextId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextType' is not null or undefined
            assertParamExists('toolConfigurationControllerGetAvailableToolsForContext', 'contextType', contextType)
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('toolConfigurationControllerGetAvailableToolsForContext', 'contextId', contextId)
            const localVarPath = `/tools/{contextType}/{contextId}/available-tools`
                .replace(`{${"contextType"}}`, encodeURIComponent(String(contextType)))
                .replace(`{${"contextId"}}`, encodeURIComponent(String(contextId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all available tools that can be added for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetAvailableToolsForSchool: async (schoolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('toolConfigurationControllerGetAvailableToolsForSchool', 'schoolId', schoolId)
            const localVarPath = `/tools/school/{schoolId}/available-tools`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the latest configuration template for a Context External Tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetConfigurationTemplateForContext: async (contextExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolConfigurationControllerGetConfigurationTemplateForContext', 'contextExternalToolId', contextExternalToolId)
            const localVarPath = `/tools/context-external-tools/{contextExternalToolId}/configuration-template`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the latest configuration template for a School External Tool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetConfigurationTemplateForSchool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolConfigurationControllerGetConfigurationTemplateForSchool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school-external-tools/{schoolExternalToolId}/configuration-template`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all context types available in the SVS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetToolContextTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tools/context-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a ContextExternalTool
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerCreateContextExternalTool: async (contextExternalToolPostParams: ContextExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolPostParams' is not null or undefined
            assertParamExists('toolContextControllerCreateContextExternalTool', 'contextExternalToolPostParams', contextExternalToolPostParams)
            const localVarPath = `/tools/context-external-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerDeleteContextExternalTool: async (contextExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolContextControllerDeleteContextExternalTool', 'contextExternalToolId', contextExternalToolId)
            const localVarPath = `/tools/context-external-tools/{contextExternalToolId}`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches a ContextExternalTool for the given id
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerGetContextExternalTool: async (contextExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolContextControllerGetContextExternalTool', 'contextExternalToolId', contextExternalToolId)
            const localVarPath = `/tools/context-external-tools/{contextExternalToolId}`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of ContextExternalTools for the given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerGetContextExternalToolsForContext: async (contextId: string, contextType: ToolContextType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('toolContextControllerGetContextExternalToolsForContext', 'contextId', contextId)
            // verify required parameter 'contextType' is not null or undefined
            assertParamExists('toolContextControllerGetContextExternalToolsForContext', 'contextType', contextType)
            const localVarPath = `/tools/context-external-tools/{contextType}/{contextId}`
                .replace(`{${"contextId"}}`, encodeURIComponent(String(contextId)))
                .replace(`{${"contextType"}}`, encodeURIComponent(String(contextType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerUpdateContextExternalTool: async (contextExternalToolId: string, contextExternalToolPostParams: ContextExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolContextControllerUpdateContextExternalTool', 'contextExternalToolId', contextExternalToolId)
            // verify required parameter 'contextExternalToolPostParams' is not null or undefined
            assertParamExists('toolContextControllerUpdateContextExternalTool', 'contextExternalToolPostParams', contextExternalToolPostParams)
            const localVarPath = `/tools/context-external-tools/{contextExternalToolId}`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an ExternalTool
         * @param {ExternalToolCreateParams} externalToolCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerCreateExternalTool: async (externalToolCreateParams: ExternalToolCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolCreateParams' is not null or undefined
            assertParamExists('toolControllerCreateExternalTool', 'externalToolCreateParams', externalToolCreateParams)
            const localVarPath = `/tools/external-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalToolCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an ExternalTool
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerDeleteExternalTool: async (externalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerDeleteExternalTool', 'externalToolId', externalToolId)
            const localVarPath = `/tools/external-tools/{externalToolId}`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of ExternalTools
         * @param {string} [name] Name of the external tool
         * @param {string} [clientId] OAuth2 client id of the external tool
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerFindExternalTool: async (name?: string, clientId?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tools/external-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a pdf of the external tool information
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetDatasheet: async (externalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerGetDatasheet', 'externalToolId', externalToolId)
            const localVarPath = `/tools/external-tools/{externalToolId}/datasheet`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns an ExternalTool for the given id
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetExternalTool: async (externalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerGetExternalTool', 'externalToolId', externalToolId)
            const localVarPath = `/tools/external-tools/{externalToolId}`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the logo of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetExternalToolLogo: async (externalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerGetExternalToolLogo', 'externalToolId', externalToolId)
            const localVarPath = `/tools/external-tools/{externalToolId}/logo`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the metadata of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetMetaDataForExternalTool: async (externalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerGetMetaDataForExternalTool', 'externalToolId', externalToolId)
            const localVarPath = `/tools/external-tools/{externalToolId}/metadata`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates multiple ExternalTools at the same time.
         * @param {ExternalToolBulkCreateParams} externalToolBulkCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerImportExternalTools: async (externalToolBulkCreateParams: ExternalToolBulkCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolBulkCreateParams' is not null or undefined
            assertParamExists('toolControllerImportExternalTools', 'externalToolBulkCreateParams', externalToolBulkCreateParams)
            const localVarPath = `/tools/external-tools/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalToolBulkCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an ExternalTool
         * @param {string} externalToolId 
         * @param {ExternalToolUpdateParams} externalToolUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerUpdateExternalTool: async (externalToolId: string, externalToolUpdateParams: ExternalToolUpdateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolId' is not null or undefined
            assertParamExists('toolControllerUpdateExternalTool', 'externalToolId', externalToolId)
            // verify required parameter 'externalToolUpdateParams' is not null or undefined
            assertParamExists('toolControllerUpdateExternalTool', 'externalToolUpdateParams', externalToolUpdateParams)
            const localVarPath = `/tools/external-tools/{externalToolId}`
                .replace(`{${"externalToolId"}}`, encodeURIComponent(String(externalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalToolUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tool launch request for a context external tool id
         * @param {string} contextExternalToolId The id of the context external tool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLaunchControllerGetContextExternalToolLaunchRequest: async (contextExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolLaunchControllerGetContextExternalToolLaunchRequest', 'contextExternalToolId', contextExternalToolId)
            const localVarPath = `/tools/context/{contextExternalToolId}/launch`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tool launch request for a school external tool
         * @param {string} schoolExternalToolId The id of the school external tool
         * @param {ContextExternalToolBodyParams} contextExternalToolBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLaunchControllerGetSchoolExternalToolLaunchRequest: async (schoolExternalToolId: string, contextExternalToolBodyParams: ContextExternalToolBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolLaunchControllerGetSchoolExternalToolLaunchRequest', 'schoolExternalToolId', schoolExternalToolId)
            // verify required parameter 'contextExternalToolBodyParams' is not null or undefined
            assertParamExists('toolLaunchControllerGetSchoolExternalToolLaunchRequest', 'contextExternalToolBodyParams', contextExternalToolBodyParams)
            const localVarPath = `/tools/school/{schoolExternalToolId}/launch`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextExternalToolBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ExternalTool Reference for a given context external tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolReferenceControllerGetToolReference: async (contextExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextExternalToolId' is not null or undefined
            assertParamExists('toolReferenceControllerGetToolReference', 'contextExternalToolId', contextExternalToolId)
            const localVarPath = `/tools/tool-references/context-external-tools/{contextExternalToolId}`
                .replace(`{${"contextExternalToolId"}}`, encodeURIComponent(String(contextExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ExternalTool References for a given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolReferenceControllerGetToolReferencesForContext: async (contextId: string, contextType: ToolContextType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('toolReferenceControllerGetToolReferencesForContext', 'contextId', contextId)
            // verify required parameter 'contextType' is not null or undefined
            assertParamExists('toolReferenceControllerGetToolReferencesForContext', 'contextType', contextType)
            const localVarPath = `/tools/tool-references/{contextType}/{contextId}`
                .replace(`{${"contextId"}}`, encodeURIComponent(String(contextId)))
                .replace(`{${"contextType"}}`, encodeURIComponent(String(contextType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a SchoolExternalTool
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerCreateSchoolExternalTool: async (schoolExternalToolPostParams: SchoolExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolPostParams' is not null or undefined
            assertParamExists('toolSchoolControllerCreateSchoolExternalTool', 'schoolExternalToolPostParams', schoolExternalToolPostParams)
            const localVarPath = `/tools/school-external-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerDeleteSchoolExternalTool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolSchoolControllerDeleteSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school-external-tools/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the metadata of an school external tool.
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetMetaDataForExternalTool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolSchoolControllerGetMetaDataForExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school-external-tools/{schoolExternalToolId}/metadata`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a SchoolExternalTool for the given id
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetSchoolExternalTool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolSchoolControllerGetSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school-external-tools/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of SchoolExternalTools for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetSchoolExternalTools: async (schoolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('toolSchoolControllerGetSchoolExternalTools', 'schoolId', schoolId)
            const localVarPath = `/tools/school-external-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (schoolId !== undefined) {
                localVarQueryParameter['schoolId'] = schoolId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerUpdateSchoolExternalTool: async (schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('toolSchoolControllerUpdateSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            // verify required parameter 'schoolExternalToolPostParams' is not null or undefined
            assertParamExists('toolSchoolControllerUpdateSchoolExternalTool', 'schoolExternalToolPostParams', schoolExternalToolPostParams)
            const localVarPath = `/tools/school-external-tools/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToolApi - functional programming interface
 * @export
 */
export const ToolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToolApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lists all available tools that can be added for a given context
         * @param {any} contextType 
         * @param {string} contextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolConfigurationControllerGetAvailableToolsForContext(contextType: any, contextId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolConfigurationTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolConfigurationControllerGetAvailableToolsForContext(contextType, contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all available tools that can be added for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolConfigurationControllerGetAvailableToolsForSchool(schoolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolConfigurationTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolConfigurationControllerGetAvailableToolsForSchool(schoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the latest configuration template for a Context External Tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolConfigurationTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the latest configuration template for a School External Tool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolConfigurationTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all context types available in the SVS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolConfigurationControllerGetToolContextTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolContextTypesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolConfigurationControllerGetToolContextTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a ContextExternalTool
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolContextControllerCreateContextExternalTool(contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolContextControllerCreateContextExternalTool(contextExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolContextControllerDeleteContextExternalTool(contextExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolContextControllerDeleteContextExternalTool(contextExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Searches a ContextExternalTool for the given id
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolContextControllerGetContextExternalTool(contextExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolContextControllerGetContextExternalTool(contextExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of ContextExternalTools for the given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolContextControllerGetContextExternalToolsForContext(contextId: string, contextType: ToolContextType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolSearchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolContextControllerGetContextExternalToolsForContext(contextId, contextType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolContextControllerUpdateContextExternalTool(contextExternalToolId: string, contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolContextControllerUpdateContextExternalTool(contextExternalToolId, contextExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an ExternalTool
         * @param {ExternalToolCreateParams} externalToolCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerCreateExternalTool(externalToolCreateParams: ExternalToolCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerCreateExternalTool(externalToolCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an ExternalTool
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerDeleteExternalTool(externalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerDeleteExternalTool(externalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of ExternalTools
         * @param {string} [name] Name of the external tool
         * @param {string} [clientId] OAuth2 client id of the external tool
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerFindExternalTool(name?: string, clientId?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolSearchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerFindExternalTool(name, clientId, skip, limit, sortOrder, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a pdf of the external tool information
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerGetDatasheet(externalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerGetDatasheet(externalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns an ExternalTool for the given id
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerGetExternalTool(externalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerGetExternalTool(externalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the logo of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerGetExternalToolLogo(externalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerGetExternalToolLogo(externalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the metadata of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerGetMetaDataForExternalTool(externalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerGetMetaDataForExternalTool(externalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates multiple ExternalTools at the same time.
         * @param {ExternalToolBulkCreateParams} externalToolBulkCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerImportExternalTools(externalToolBulkCreateParams: ExternalToolBulkCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerImportExternalTools(externalToolBulkCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an ExternalTool
         * @param {string} externalToolId 
         * @param {ExternalToolUpdateParams} externalToolUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerUpdateExternalTool(externalToolId: string, externalToolUpdateParams: ExternalToolUpdateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerUpdateExternalTool(externalToolId, externalToolUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tool launch request for a context external tool id
         * @param {string} contextExternalToolId The id of the context external tool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolLaunchRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tool launch request for a school external tool
         * @param {string} schoolExternalToolId The id of the school external tool
         * @param {ContextExternalToolBodyParams} contextExternalToolBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId: string, contextExternalToolBodyParams: ContextExternalToolBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolLaunchRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId, contextExternalToolBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ExternalTool Reference for a given context external tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolReferenceControllerGetToolReference(contextExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolReferenceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolReferenceControllerGetToolReference(contextExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ExternalTool References for a given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolReferenceControllerGetToolReferencesForContext(contextId: string, contextType: ToolContextType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolReferenceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolReferenceControllerGetToolReferencesForContext(contextId, contextType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a SchoolExternalTool
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the metadata of an school external tool.
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a SchoolExternalTool for the given id
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of SchoolExternalTools for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerGetSchoolExternalTools(schoolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolSearchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerGetSchoolExternalTools(schoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ToolApi - factory interface
 * @export
 */
export const ToolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToolApiFp(configuration)
    return {
        /**
         * 
         * @summary Lists all available tools that can be added for a given context
         * @param {any} contextType 
         * @param {string} contextId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetAvailableToolsForContext(contextType: any, contextId: string, options?: any): AxiosPromise<ContextExternalToolConfigurationTemplateListResponse> {
            return localVarFp.toolConfigurationControllerGetAvailableToolsForContext(contextType, contextId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all available tools that can be added for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetAvailableToolsForSchool(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolConfigurationTemplateListResponse> {
            return localVarFp.toolConfigurationControllerGetAvailableToolsForSchool(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the latest configuration template for a Context External Tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId: string, options?: any): AxiosPromise<ContextExternalToolConfigurationTemplateResponse> {
            return localVarFp.toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the latest configuration template for a School External Tool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolConfigurationTemplateResponse> {
            return localVarFp.toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all context types available in the SVS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolConfigurationControllerGetToolContextTypes(options?: any): AxiosPromise<ToolContextTypesListResponse> {
            return localVarFp.toolConfigurationControllerGetToolContextTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a ContextExternalTool
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerCreateContextExternalTool(contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): AxiosPromise<ContextExternalToolResponse> {
            return localVarFp.toolContextControllerCreateContextExternalTool(contextExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerDeleteContextExternalTool(contextExternalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.toolContextControllerDeleteContextExternalTool(contextExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Searches a ContextExternalTool for the given id
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerGetContextExternalTool(contextExternalToolId: string, options?: any): AxiosPromise<ContextExternalToolResponse> {
            return localVarFp.toolContextControllerGetContextExternalTool(contextExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of ContextExternalTools for the given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerGetContextExternalToolsForContext(contextId: string, contextType: ToolContextType, options?: any): AxiosPromise<ContextExternalToolSearchListResponse> {
            return localVarFp.toolContextControllerGetContextExternalToolsForContext(contextId, contextType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a ContextExternalTool
         * @param {string} contextExternalToolId 
         * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolContextControllerUpdateContextExternalTool(contextExternalToolId: string, contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): AxiosPromise<ContextExternalToolResponse> {
            return localVarFp.toolContextControllerUpdateContextExternalTool(contextExternalToolId, contextExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an ExternalTool
         * @param {ExternalToolCreateParams} externalToolCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerCreateExternalTool(externalToolCreateParams: ExternalToolCreateParams, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.toolControllerCreateExternalTool(externalToolCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an ExternalTool
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerDeleteExternalTool(externalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.toolControllerDeleteExternalTool(externalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of ExternalTools
         * @param {string} [name] Name of the external tool
         * @param {string} [clientId] OAuth2 client id of the external tool
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerFindExternalTool(name?: string, clientId?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): AxiosPromise<ExternalToolSearchListResponse> {
            return localVarFp.toolControllerFindExternalTool(name, clientId, skip, limit, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a pdf of the external tool information
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetDatasheet(externalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.toolControllerGetDatasheet(externalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns an ExternalTool for the given id
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetExternalTool(externalToolId: string, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.toolControllerGetExternalTool(externalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the logo of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetExternalToolLogo(externalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.toolControllerGetExternalToolLogo(externalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the metadata of an external tool.
         * @param {string} externalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetMetaDataForExternalTool(externalToolId: string, options?: any): AxiosPromise<ExternalToolMetadataResponse> {
            return localVarFp.toolControllerGetMetaDataForExternalTool(externalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates multiple ExternalTools at the same time.
         * @param {ExternalToolBulkCreateParams} externalToolBulkCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerImportExternalTools(externalToolBulkCreateParams: ExternalToolBulkCreateParams, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.toolControllerImportExternalTools(externalToolBulkCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an ExternalTool
         * @param {string} externalToolId 
         * @param {ExternalToolUpdateParams} externalToolUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerUpdateExternalTool(externalToolId: string, externalToolUpdateParams: ExternalToolUpdateParams, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.toolControllerUpdateExternalTool(externalToolId, externalToolUpdateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tool launch request for a context external tool id
         * @param {string} contextExternalToolId The id of the context external tool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId: string, options?: any): AxiosPromise<ToolLaunchRequestResponse> {
            return localVarFp.toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tool launch request for a school external tool
         * @param {string} schoolExternalToolId The id of the school external tool
         * @param {ContextExternalToolBodyParams} contextExternalToolBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId: string, contextExternalToolBodyParams: ContextExternalToolBodyParams, options?: any): AxiosPromise<ToolLaunchRequestResponse> {
            return localVarFp.toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId, contextExternalToolBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ExternalTool Reference for a given context external tool
         * @param {string} contextExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolReferenceControllerGetToolReference(contextExternalToolId: string, options?: any): AxiosPromise<ToolReferenceResponse> {
            return localVarFp.toolReferenceControllerGetToolReference(contextExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ExternalTool References for a given context
         * @param {string} contextId 
         * @param {ToolContextType} contextType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolReferenceControllerGetToolReferencesForContext(contextId: string, contextType: ToolContextType, options?: any): AxiosPromise<ToolReferenceListResponse> {
            return localVarFp.toolReferenceControllerGetToolReferencesForContext(contextId, contextType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a SchoolExternalTool
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the metadata of an school external tool.
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolMetadataResponse> {
            return localVarFp.toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a SchoolExternalTool for the given id
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of SchoolExternalTools for a given school
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerGetSchoolExternalTools(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolSearchListResponse> {
            return localVarFp.toolSchoolControllerGetSchoolExternalTools(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a SchoolExternalTool
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToolApi - interface
 * @export
 * @interface ToolApi
 */
export interface ToolApiInterface {
    /**
     * 
     * @summary Lists all available tools that can be added for a given context
     * @param {any} contextType 
     * @param {string} contextId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolConfigurationControllerGetAvailableToolsForContext(contextType: any, contextId: string, options?: any): AxiosPromise<ContextExternalToolConfigurationTemplateListResponse>;

    /**
     * 
     * @summary Lists all available tools that can be added for a given school
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolConfigurationControllerGetAvailableToolsForSchool(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolConfigurationTemplateListResponse>;

    /**
     * 
     * @summary Get the latest configuration template for a Context External Tool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId: string, options?: any): AxiosPromise<ContextExternalToolConfigurationTemplateResponse>;

    /**
     * 
     * @summary Get the latest configuration template for a School External Tool
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolConfigurationTemplateResponse>;

    /**
     * 
     * @summary Lists all context types available in the SVS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolConfigurationControllerGetToolContextTypes(options?: any): AxiosPromise<ToolContextTypesListResponse>;

    /**
     * 
     * @summary Creates a ContextExternalTool
     * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolContextControllerCreateContextExternalTool(contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): AxiosPromise<ContextExternalToolResponse>;

    /**
     * 
     * @summary Deletes a ContextExternalTool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolContextControllerDeleteContextExternalTool(contextExternalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Searches a ContextExternalTool for the given id
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolContextControllerGetContextExternalTool(contextExternalToolId: string, options?: any): AxiosPromise<ContextExternalToolResponse>;

    /**
     * 
     * @summary Returns a list of ContextExternalTools for the given context
     * @param {string} contextId 
     * @param {ToolContextType} contextType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolContextControllerGetContextExternalToolsForContext(contextId: string, contextType: ToolContextType, options?: any): AxiosPromise<ContextExternalToolSearchListResponse>;

    /**
     * 
     * @summary Updates a ContextExternalTool
     * @param {string} contextExternalToolId 
     * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolContextControllerUpdateContextExternalTool(contextExternalToolId: string, contextExternalToolPostParams: ContextExternalToolPostParams, options?: any): AxiosPromise<ContextExternalToolResponse>;

    /**
     * 
     * @summary Creates an ExternalTool
     * @param {ExternalToolCreateParams} externalToolCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerCreateExternalTool(externalToolCreateParams: ExternalToolCreateParams, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @summary Deletes an ExternalTool
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerDeleteExternalTool(externalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Returns a list of ExternalTools
     * @param {string} [name] Name of the external tool
     * @param {string} [clientId] OAuth2 client id of the external tool
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'id' | 'name'} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerFindExternalTool(name?: string, clientId?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): AxiosPromise<ExternalToolSearchListResponse>;

    /**
     * 
     * @summary Returns a pdf of the external tool information
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerGetDatasheet(externalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Returns an ExternalTool for the given id
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerGetExternalTool(externalToolId: string, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @summary Gets the logo of an external tool.
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerGetExternalToolLogo(externalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Gets the metadata of an external tool.
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerGetMetaDataForExternalTool(externalToolId: string, options?: any): AxiosPromise<ExternalToolMetadataResponse>;

    /**
     * 
     * @summary Creates multiple ExternalTools at the same time.
     * @param {ExternalToolBulkCreateParams} externalToolBulkCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerImportExternalTools(externalToolBulkCreateParams: ExternalToolBulkCreateParams, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @summary Updates an ExternalTool
     * @param {string} externalToolId 
     * @param {ExternalToolUpdateParams} externalToolUpdateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolControllerUpdateExternalTool(externalToolId: string, externalToolUpdateParams: ExternalToolUpdateParams, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @summary Get tool launch request for a context external tool id
     * @param {string} contextExternalToolId The id of the context external tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId: string, options?: any): AxiosPromise<ToolLaunchRequestResponse>;

    /**
     * 
     * @summary Get tool launch request for a school external tool
     * @param {string} schoolExternalToolId The id of the school external tool
     * @param {ContextExternalToolBodyParams} contextExternalToolBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId: string, contextExternalToolBodyParams: ContextExternalToolBodyParams, options?: any): AxiosPromise<ToolLaunchRequestResponse>;

    /**
     * 
     * @summary Get ExternalTool Reference for a given context external tool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolReferenceControllerGetToolReference(contextExternalToolId: string, options?: any): AxiosPromise<ToolReferenceResponse>;

    /**
     * 
     * @summary Get ExternalTool References for a given context
     * @param {string} contextId 
     * @param {ToolContextType} contextType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolReferenceControllerGetToolReferencesForContext(contextId: string, contextType: ToolContextType, options?: any): AxiosPromise<ToolReferenceListResponse>;

    /**
     * 
     * @summary Creates a SchoolExternalTool
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse>;

    /**
     * 
     * @summary Deletes a SchoolExternalTool
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Gets the metadata of an school external tool.
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolMetadataResponse>;

    /**
     * 
     * @summary Returns a SchoolExternalTool for the given id
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolResponse>;

    /**
     * 
     * @summary Returns a list of SchoolExternalTools for a given school
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerGetSchoolExternalTools(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolSearchListResponse>;

    /**
     * 
     * @summary Updates a SchoolExternalTool
     * @param {string} schoolExternalToolId 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse>;

}

/**
 * ToolApi - object-oriented interface
 * @export
 * @class ToolApi
 * @extends {BaseAPI}
 */
export class ToolApi extends BaseAPI implements ToolApiInterface {
    /**
     * 
     * @summary Lists all available tools that can be added for a given context
     * @param {any} contextType 
     * @param {string} contextId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolConfigurationControllerGetAvailableToolsForContext(contextType: any, contextId: string, options?: any) {
        return ToolApiFp(this.configuration).toolConfigurationControllerGetAvailableToolsForContext(contextType, contextId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all available tools that can be added for a given school
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolConfigurationControllerGetAvailableToolsForSchool(schoolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolConfigurationControllerGetAvailableToolsForSchool(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the latest configuration template for a Context External Tool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolConfigurationControllerGetConfigurationTemplateForContext(contextExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the latest configuration template for a School External Tool
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolConfigurationControllerGetConfigurationTemplateForSchool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all context types available in the SVS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolConfigurationControllerGetToolContextTypes(options?: any) {
        return ToolApiFp(this.configuration).toolConfigurationControllerGetToolContextTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a ContextExternalTool
     * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolContextControllerCreateContextExternalTool(contextExternalToolPostParams: ContextExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).toolContextControllerCreateContextExternalTool(contextExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a ContextExternalTool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolContextControllerDeleteContextExternalTool(contextExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolContextControllerDeleteContextExternalTool(contextExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Searches a ContextExternalTool for the given id
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolContextControllerGetContextExternalTool(contextExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolContextControllerGetContextExternalTool(contextExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of ContextExternalTools for the given context
     * @param {string} contextId 
     * @param {ToolContextType} contextType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolContextControllerGetContextExternalToolsForContext(contextId: string, contextType: ToolContextType, options?: any) {
        return ToolApiFp(this.configuration).toolContextControllerGetContextExternalToolsForContext(contextId, contextType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a ContextExternalTool
     * @param {string} contextExternalToolId 
     * @param {ContextExternalToolPostParams} contextExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolContextControllerUpdateContextExternalTool(contextExternalToolId: string, contextExternalToolPostParams: ContextExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).toolContextControllerUpdateContextExternalTool(contextExternalToolId, contextExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an ExternalTool
     * @param {ExternalToolCreateParams} externalToolCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerCreateExternalTool(externalToolCreateParams: ExternalToolCreateParams, options?: any) {
        return ToolApiFp(this.configuration).toolControllerCreateExternalTool(externalToolCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an ExternalTool
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerDeleteExternalTool(externalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolControllerDeleteExternalTool(externalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of ExternalTools
     * @param {string} [name] Name of the external tool
     * @param {string} [clientId] OAuth2 client id of the external tool
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'id' | 'name'} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerFindExternalTool(name?: string, clientId?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any) {
        return ToolApiFp(this.configuration).toolControllerFindExternalTool(name, clientId, skip, limit, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a pdf of the external tool information
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerGetDatasheet(externalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolControllerGetDatasheet(externalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns an ExternalTool for the given id
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerGetExternalTool(externalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolControllerGetExternalTool(externalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the logo of an external tool.
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerGetExternalToolLogo(externalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolControllerGetExternalToolLogo(externalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the metadata of an external tool.
     * @param {string} externalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerGetMetaDataForExternalTool(externalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolControllerGetMetaDataForExternalTool(externalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates multiple ExternalTools at the same time.
     * @param {ExternalToolBulkCreateParams} externalToolBulkCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerImportExternalTools(externalToolBulkCreateParams: ExternalToolBulkCreateParams, options?: any) {
        return ToolApiFp(this.configuration).toolControllerImportExternalTools(externalToolBulkCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an ExternalTool
     * @param {string} externalToolId 
     * @param {ExternalToolUpdateParams} externalToolUpdateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolControllerUpdateExternalTool(externalToolId: string, externalToolUpdateParams: ExternalToolUpdateParams, options?: any) {
        return ToolApiFp(this.configuration).toolControllerUpdateExternalTool(externalToolId, externalToolUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tool launch request for a context external tool id
     * @param {string} contextExternalToolId The id of the context external tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolLaunchControllerGetContextExternalToolLaunchRequest(contextExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tool launch request for a school external tool
     * @param {string} schoolExternalToolId The id of the school external tool
     * @param {ContextExternalToolBodyParams} contextExternalToolBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId: string, contextExternalToolBodyParams: ContextExternalToolBodyParams, options?: any) {
        return ToolApiFp(this.configuration).toolLaunchControllerGetSchoolExternalToolLaunchRequest(schoolExternalToolId, contextExternalToolBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ExternalTool Reference for a given context external tool
     * @param {string} contextExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolReferenceControllerGetToolReference(contextExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolReferenceControllerGetToolReference(contextExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ExternalTool References for a given context
     * @param {string} contextId 
     * @param {ToolContextType} contextType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolReferenceControllerGetToolReferencesForContext(contextId: string, contextType: ToolContextType, options?: any) {
        return ToolApiFp(this.configuration).toolReferenceControllerGetToolReferencesForContext(contextId, contextType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a SchoolExternalTool
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerCreateSchoolExternalTool(schoolExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a SchoolExternalTool
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerDeleteSchoolExternalTool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the metadata of an school external tool.
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerGetMetaDataForExternalTool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a SchoolExternalTool for the given id
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerGetSchoolExternalTool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of SchoolExternalTools for a given school
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerGetSchoolExternalTools(schoolId: string, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerGetSchoolExternalTools(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a SchoolExternalTool
     * @param {string} schoolExternalToolId 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).toolSchoolControllerUpdateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }
}
